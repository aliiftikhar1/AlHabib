generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int      @id @default(autoincrement())
  role       String   @db.VarChar(255)
  username   String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  fullname   String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Users {
  id                  Int                   @id @default(autoincrement())
  name                String
  username            String                @unique
  password            String
  phoneno             String
  city                String
  address             String
  bname               String
  created_at          DateTime              @default(now())
  updated_at          DateTime
  emailverification   String?               @default("False")
  status              String?               @default("Pending")
  token               String?
  role                String?
  balance             Int?
  Ledger              Ledger[]
  PackageBookings     PackageBookings[]
  VisaBookings        VisaBookings[]
  TicketBookings      TicketBookings[]
  PaymentRequests     PaymentRequests[]
  FlightBookings      FlightBookings[]
  GroupFlightBookings GroupFlightBookings[]
  NewLedger           NewLedger[]
  HotelBooking        HotelBooking[]
  Notifications       Notifications[]
}

model Packages {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  image       String   @db.Text
  amount      Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  PackageBookings PackageBookings[]
}

model Visa {
  id           Int            @id @default(autoincrement())
  title        String
  description  String
  image        String         @db.Text
  amount       Float
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  VisaBookings VisaBookings[]
}

model Tickets {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  image          String           @db.Text
  amount         Float
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  TicketBookings TicketBookings[]
}

model PaymentRequests {
  id            Int      @id @default(autoincrement())
  userid        Int
  transactionno String   @unique
  img_url       String   @db.Text
  status        String
  verified_by   String?
  amount        Float
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  Users Users @relation(fields: [userid], references: [id], onDelete: Cascade)
  NewLedger     NewLedger[]
}

model Ledger {
  id             Int      @id @default(autoincrement()) // Primary key with auto-increment
  userId         Int // Foreign key to the User table
  debit          Float    @default(0.0) // Amount debited
  credit         Float    @default(0.0) // Amount credited
  balance        Float    @default(0.0) // Current balance
  description    String?  @db.VarChar(255) // Description of the transaction
  transaction_at DateTime @default(now())
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  Users          Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PackageBookings {
  booking_id       Int      @id @default(autoincrement()) // Auto-incrementing primary key
  user_id          Int // ID of the user who made the booking
  package_id       Int // ID of the booked package
  total_amount     Float // Total amount for the booking
  paid_amount      Float // Amount paid for the booking
  remaining_amount Float // Remaining amount to be paid
  status           String // Status of the booking (e.g., Confirmed, Pending)
  payment_method   String // Payment method (e.g., Credit Card, PayPal)
  notes            String? // Additional notes related to the booking
  created_at       DateTime @default(now()) // Timestamp when the booking is created
  updated_at       DateTime @updatedAt // Automatically updates when the record is updated

  Users    Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Packages Packages @relation(fields: [package_id], references: [id], onDelete: Cascade)
}

model VisaBookings {
  booking_id       Int      @id @default(autoincrement()) // Auto-incrementing primary key
  user_id          Int // ID of the user who made the booking
  visa_id          Int // ID of the booked package
  total_amount     Float // Total amount for the booking
  paid_amount      Float // Amount paid for the booking
  remaining_amount Float // Remaining amount to be paid
  status           String // Status of the booking (e.g., Confirmed, Pending)
  payment_method   String // Payment method (e.g., Credit Card, PayPal)
  notes            String? // Additional notes related to the booking
  created_at       DateTime @default(now()) // Timestamp when the booking is created
  updated_at       DateTime @updatedAt // Automatically updates when the record is updated

  Users Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Visa  Visa  @relation(fields: [visa_id], references: [id], onDelete: Cascade)
}

model TicketBookings {
  booking_id       Int      @id @default(autoincrement()) // Auto-incrementing primary key
  user_id          Int // ID of the user who made the booking
  ticket_id        Int // ID of the booked package
  total_amount     Float // Total amount for the booking
  paid_amount      Float // Amount paid for the booking
  remaining_amount Float // Remaining amount to be paid
  status           String // Status of the booking (e.g., Confirmed, Pending)
  payment_method   String // Payment method (e.g., Credit Card, PayPal)
  notes            String? // Additional notes related to the booking
  created_at       DateTime @default(now()) // Timestamp when the booking is created
  updated_at       DateTime @updatedAt

  Users   Users   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Tickets Tickets @relation(fields: [ticket_id], references: [id], onDelete: Cascade)
}

model BankAccounts {
  id            Int      @id @default(autoincrement()) // Auto-incrementing primary key
  bank_title    String // Title of the bank
  account_title String // Title of the account (e.g., Savings, Checking)
  account_no    String // Account number (you can add @unique if the account numbers must be unique)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt // Automatically updates when the record is updated
}

model FlightDetails {
  id         Int      @id @default(autoincrement())
  airline    String
  airline_sn String
  meal       Boolean
  fare       String
  type       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  SingleFlight   SingleFlight[]
  FlightBookings FlightBookings[]
}

model SingleFlight {
  id               Int      @id @default(autoincrement())
  flightdetails_id Int
  flight_number    Int
  flight_date      DateTime @default(now())
  origin           String
  destination      String
  dept_time        DateTime @default(now())
  arrival_time     DateTime @default(now())
  baggage          String
  seats            Int      @default(2)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  FlightDetails FlightDetails @relation(fields: [flightdetails_id], references: [id], onDelete: Cascade)
}

model FlightBookings {
  id               Int           @id @default(autoincrement())
  agent_id         Int
  flightdetails_id Int
  childs           Int
  adults           Int
  infants          Int
  status           String
  remarks          String
  attachment       String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  Users            Users         @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  FlightDetails    FlightDetails @relation(fields: [flightdetails_id], references: [id], onDelete: Cascade)
  Passengers       Passengers[]
  NewLedger           NewLedger[]
}

model Passengers {
  id             Int            @id @default(autoincrement())
  booking_id     Int
  givenname      String
  surname        String
  title          String
  type           String         @default("Adult")
  passportid     String
  dob            String
  doe            String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  FlightBookings FlightBookings @relation(fields: [booking_id], references: [id], onDelete: Cascade)
}

model FlightGroups {
  id                  Int                   @id @default(autoincrement())
  title               String
  image               String
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  SingleGroupFlight   SingleGroupFlight[]
  GroupFlightBookings GroupFlightBookings[]
}

model FlightSector {
  id         Int      @id @default(autoincrement())
  type       String
  to         String
  from       String
  to2        String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  SingleGroupFlight   SingleGroupFlight[]
  GroupFlightBookings GroupFlightBookings[]
}

model FlightAirline {
  id         Int      @id @default(autoincrement())
  name       String
  sn         String?
  image      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  SingleGroupFlight   SingleGroupFlight[]
  GroupFlightBookings GroupFlightBookings[]
}

model SingleGroupFlight {
  id               Int      @id @default(autoincrement())
  flightgroup_id   Int
  flightsector_id  Int
  flightairline_id Int
  flight_number    Int
  flight_date      DateTime @default(now())
  origin           String
  destination      String
  dept_time        DateTime @default(now())
  arrival_time     DateTime @default(now())
  baggage          String
  flight_number2    Int?
  flight_date2      DateTime @default(now())
  origin2          String?
  destination2      String?
  dept_time2        DateTime @default(now())
  arrival_time2     DateTime @default(now())
  seats            Int      @default(2)
  fare             Int
  meal             Boolean
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  FlightGroups  FlightGroups  @relation(fields: [flightgroup_id], references: [id], onDelete: Cascade)
  FlightSector  FlightSector  @relation(fields: [flightsector_id], references: [id], onDelete: Cascade)
  FlightAirline FlightAirline @relation(fields: [flightairline_id], references: [id], onDelete: Cascade)
  GroupFlightBookings GroupFlightBookings[]
}

model GroupFlightBookings {
  id               Int               @id @default(autoincrement())
  agent_id         Int
  flightgroup_id   Int
  flightsector_id  Int
  flightairline_id Int
  flight_id        Int @default(7)
  childs           Int
  adults           Int
  infants          Int
  status           String
  remarks          String
  attachment       String?
  created_at       DateTime          @default(now())
  updated_at       DateTime          @updatedAt
  Users            Users             @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  SingleGroupFlight SingleGroupFlight @relation(fields: [flight_id], references: [id], onDelete: Cascade)
  FlightGroups     FlightGroups      @relation(fields: [flightgroup_id], references: [id], onDelete: Cascade)
  FlightSector     FlightSector      @relation(fields: [flightsector_id], references: [id], onDelete: Cascade)
  FlightAirline    FlightAirline     @relation(fields: [flightairline_id], references: [id], onDelete: Cascade)
  GroupPassengers  GroupPassengers[]
  NewLedger           NewLedger[]
}

model GroupPassengers {
  id                  Int                 @id @default(autoincrement())
  groupbooking_id     Int
  givenname           String
  surname             String
  title               String
  type                String              @default("Adult")
  passportid          String
  dob                 String
  doe                 String
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  GroupFlightBookings GroupFlightBookings @relation(fields: [groupbooking_id], references: [id], onDelete: Cascade)
}

model RoomType{
  id                  Int                 @id @default(autoincrement())
  title               String
  description        String
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  Hotel               Hotel[]
}

model  Hotel{
  id                  Int                 @id @default(autoincrement())
  name                String
  description        String
  location             String
  price                 Int
  roomtype              Int
  availability          Boolean
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  RoomType             RoomType           @relation(fields: [roomtype], references: [id], onDelete: Cascade)
  HotelBooking          HotelBooking[]
}

model HotelBooking{
  id                  Int                 @id @default(autoincrement())
  agent_id            Int                 @default(8)
  hotel_id            Int
  check_in_date         DateTime            @default(now())
  check_out             DateTime            @default(now())
  rooms                  Int
  childs           Int        @default(0)
  adults           Int        @default(0)
  infants          Int        @default(0)
  status            String    @default("Pending")
  remarks          String     @default("None")
  attachment       String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  Hotel                 Hotel             @relation(fields: [hotel_id], references: [id], onDelete: Cascade)
  Users                 Users             @relation(fields: [agent_id], references:[id],onDelete: Cascade)
  NewLedger           NewLedger[]
  Hoteliers           Hoteliers[]
}
model Hoteliers{
  id             Int            @id @default(autoincrement())
  hotel_booking_id     Int
  givenname      String
  surname        String
  title          String
  type           String         @default("Adult")
  passportid     String
  dob            String
  doe            String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  HotelBooking HotelBooking @relation(fields: [hotel_booking_id], references: [id], onDelete: Cascade)
}

model NewLedger {
  id                       Int      @id @default(autoincrement())
  agent_id                 Int
  description              String
  date                     DateTime @default(now())
  amount_out               Float    @default(0.0)
  amount_in                Float    @default(0.0)
  balance                  Float    @default(0.0)
  type                     String   //hotel-booking(credit), flight-booking(credit), group-flight-booking(credit), payment-request(debit)

  hotel_booking_id         Int? // Reference to a hotel booking
  flight_booking_id        Int? // Reference to a flight booking
  flight_group_booking_id  Int? // Reference to a group flight booking
  payment_request_id       Int? // Reference to a payment request

  // Relations
  Users                    Users   @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  HotelBooking             HotelBooking?             @relation(fields: [hotel_booking_id], references: [id], onDelete: Cascade)
  FlightBookings           FlightBookings?           @relation(fields: [flight_booking_id], references: [id], onDelete: Cascade)
  GroupFlightBookings      GroupFlightBookings?      @relation(fields: [flight_group_booking_id], references: [id], onDelete: Cascade)
  PaymentRequests          PaymentRequests?          @relation(fields: [payment_request_id], references: [id], onDelete: Cascade)

  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt

  @@index([agent_id])
  @@index([hotel_booking_id])
  @@index([flight_booking_id])
  @@index([flight_group_booking_id])
  @@index([payment_request_id])
}


model Notifications{
  id             Int            @id @default(autoincrement())
  user_id         Int
  message        String
  status          String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  Users           Users         @relation(fields: [user_id], references: [id], onDelete:Cascade)
}